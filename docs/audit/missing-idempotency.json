{
  "timestamp": "2025-09-26T13:54:39.775Z",
  "summary": {
    "totalRoutes": 170,
    "protectedRoutes": 1,
    "missingIdempotency": 87,
    "exemptRoutes": 22
  },
  "routes": [
    {
      "path": "/api/deals",
      "file": "src/app/api/deals/route.ts",
      "methods": [
        "POST",
        "GET"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts",
      "file": "src/app/api/contacts/route.ts",
      "methods": [
        "GET",
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/x/refresh",
      "file": "src/app/api/x/refresh/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/x/disconnect",
      "file": "src/app/api/x/disconnect/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/workspaces/export",
      "file": "src/app/api/workspaces/export/route.ts",
      "methods": [
        "GET",
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/tiktok/status",
      "file": "src/app/api/tiktok/status/route.ts",
      "methods": [
        "GET",
        "POST",
        "PUT",
        "DELETE"
      ],
      "unsafeMethods": [
        "POST",
        "PUT",
        "DELETE"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        },
        {
          "type": "transaction",
          "description": "Use tx() for multi-write operations",
          "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
        }
      ]
    },
    {
      "path": "/api/util/sign",
      "file": "src/app/api/util/sign/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/tiktok/refresh",
      "file": "src/app/api/tiktok/refresh/route.ts",
      "methods": [
        "POST",
        "GET"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/tiktok/disconnect",
      "file": "src/app/api/tiktok/disconnect/route.ts",
      "methods": [
        "POST",
        "GET"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/workspaces/purge",
      "file": "src/app/api/workspaces/purge/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/sequence/dispatch",
      "file": "src/app/api/sequence/dispatch/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/sequence/start",
      "file": "src/app/api/sequence/start/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/onlyfans/manual",
      "file": "src/app/api/onlyfans/manual/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/push/subscribe",
      "file": "src/app/api/push/subscribe/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/outreach/start",
      "file": "src/app/api/outreach/start/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "outreach",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/outreach/inbound",
      "file": "src/app/api/outreach/inbound/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "outreach",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/netfx/playbook",
      "file": "src/app/api/netfx/playbook/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/netfx/aggregate",
      "file": "src/app/api/netfx/aggregate/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/media-pack/track",
      "file": "src/app/api/media-pack/track/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "media-pack",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/media-pack/generate-pdf",
      "file": "src/app/api/media-pack/generate-pdf/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "media-pack",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/match/top",
      "file": "src/app/api/match/top/route.ts",
      "methods": [
        "GET",
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/match/search",
      "file": "src/app/api/match/search/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/media-pack/share",
      "file": "src/app/api/media-pack/share/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "media-pack",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/linkedin/refresh",
      "file": "src/app/api/linkedin/refresh/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/linkedin/disconnect",
      "file": "src/app/api/linkedin/disconnect/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/imports/start",
      "file": "src/app/api/imports/start/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/inbox/send-reply",
      "file": "src/app/api/inbox/send-reply/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/imports/run",
      "file": "src/app/api/imports/run/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/imports/map",
      "file": "src/app/api/imports/map/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/invite/verify",
      "file": "src/app/api/invite/verify/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/instagram/refresh",
      "file": "src/app/api/instagram/refresh/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/instagram/disconnect",
      "file": "src/app/api/instagram/disconnect/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/feedback/submit",
      "file": "src/app/api/feedback/submit/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/demo/toggle",
      "file": "src/app/api/demo/toggle/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/email/webhook",
      "file": "src/app/api/email/webhook/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/evals/run",
      "file": "src/app/api/evals/run/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/cron/match-refresh",
      "file": "src/app/api/cron/match-refresh/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/deals/redline",
      "file": "src/app/api/deals/redline/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/deals/counter-offer",
      "file": "src/app/api/deals/counter-offer/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/deals/log",
      "file": "src/app/api/deals/log/route.ts",
      "methods": [
        "POST",
        "GET"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/deals/calc",
      "file": "src/app/api/deals/calc/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/deals/[id]",
      "file": "src/app/api/deals/[id]/route.ts",
      "methods": [
        "PUT",
        "GET"
      ],
      "unsafeMethods": [
        "PUT"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const PUT = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/calendar/book",
      "file": "src/app/api/calendar/book/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts/import",
      "file": "src/app/api/contacts/import/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts/merge",
      "file": "src/app/api/contacts/merge/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts/export",
      "file": "src/app/api/contacts/export/route.ts",
      "methods": [
        "GET",
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts/enrich",
      "file": "src/app/api/contacts/enrich/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts/bulk-tag",
      "file": "src/app/api/contacts/bulk-tag/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/calendar/propose",
      "file": "src/app/api/calendar/propose/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts/bulk",
      "file": "src/app/api/contacts/bulk/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts/[id]",
      "file": "src/app/api/contacts/[id]/route.ts",
      "methods": [
        "GET",
        "PUT",
        "PATCH",
        "DELETE"
      ],
      "unsafeMethods": [
        "PUT",
        "PATCH",
        "DELETE"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const PUT = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        },
        {
          "type": "transaction",
          "description": "Use tx() for multi-write operations",
          "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts/bulk-delete",
      "file": "src/app/api/contacts/bulk-delete/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/brand-run/upsert",
      "file": "src/app/api/brand-run/upsert/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "brand-run",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/brand-run/one-touch",
      "file": "src/app/api/brand-run/one-touch/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "brand-run",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/brand-run/start",
      "file": "src/app/api/brand-run/start/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "brand-run",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/brand-run/advance",
      "file": "src/app/api/brand-run/advance/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "brand-run",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/billing/webhook",
      "file": "src/app/api/billing/webhook/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/billing/reset-daily",
      "file": "src/app/api/billing/reset-daily/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/billing/checkout",
      "file": "src/app/api/billing/checkout/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/billing/portal",
      "file": "src/app/api/billing/portal/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/agency/revoke-all",
      "file": "src/app/api/agency/revoke-all/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/agency/remove",
      "file": "src/app/api/agency/remove/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/agency/list",
      "file": "src/app/api/agency/list/route.ts",
      "methods": [
        "GET",
        "POST",
        "DELETE"
      ],
      "unsafeMethods": [
        "POST",
        "DELETE"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        },
        {
          "type": "transaction",
          "description": "Use tx() for multi-write operations",
          "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
        }
      ]
    },
    {
      "path": "/api/agency/invite",
      "file": "src/app/api/agency/invite/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/audit/status",
      "file": "src/app/api/audit/status/route.ts",
      "methods": [
        "GET",
        "POST",
        "PUT",
        "DELETE"
      ],
      "unsafeMethods": [
        "POST",
        "PUT",
        "DELETE"
      ],
      "protected": false,
      "category": "audit",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        },
        {
          "type": "transaction",
          "description": "Use tx() for multi-write operations",
          "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
        }
      ]
    },
    {
      "path": "/api/audit/run",
      "file": "src/app/api/audit/run/route.ts",
      "methods": [
        "GET",
        "PUT",
        "DELETE"
      ],
      "unsafeMethods": [
        "PUT",
        "DELETE"
      ],
      "protected": true,
      "category": "audit",
      "suggestions": []
    },
    {
      "path": "/api/audit/latest",
      "file": "src/app/api/audit/latest/route.ts",
      "methods": [
        "GET",
        "POST",
        "PUT",
        "DELETE"
      ],
      "unsafeMethods": [
        "POST",
        "PUT",
        "DELETE"
      ],
      "protected": false,
      "category": "audit",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        },
        {
          "type": "transaction",
          "description": "Use tx() for multi-write operations",
          "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
        }
      ]
    },
    {
      "path": "/api/audit/get",
      "file": "src/app/api/audit/get/route.ts",
      "methods": [
        "GET",
        "POST",
        "PUT",
        "DELETE"
      ],
      "unsafeMethods": [
        "POST",
        "PUT",
        "DELETE"
      ],
      "protected": false,
      "category": "audit",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        },
        {
          "type": "transaction",
          "description": "Use tx() for multi-write operations",
          "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
        }
      ]
    },
    {
      "path": "/api/ai/match",
      "file": "src/app/api/ai/match/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/ai/analyze",
      "file": "src/app/api/ai/analyze/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/_util/sign",
      "file": "src/app/api/_util/sign/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/admin/login",
      "file": "src/app/api/admin/login/route.ts",
      "methods": [
        "POST",
        "GET"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/ai/generate",
      "file": "src/app/api/ai/generate/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/admin/impersonate",
      "file": "src/app/api/admin/impersonate/route.ts",
      "methods": [
        "POST",
        "DELETE"
      ],
      "unsafeMethods": [
        "POST",
        "DELETE"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        },
        {
          "type": "transaction",
          "description": "Use tx() for multi-write operations",
          "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
        }
      ]
    },
    {
      "path": "/api/admin/bootstrap",
      "file": "src/app/api/admin/bootstrap/route.ts",
      "methods": [
        "POST",
        "GET"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/outreach/webhooks/resend",
      "file": "src/app/api/outreach/webhooks/resend/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "outreach",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/outreach/inbox/reply",
      "file": "src/app/api/outreach/inbox/reply/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "outreach",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/imports/[id]/undo",
      "file": "src/app/api/imports/[id]/undo/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/deals/[id]/next-step",
      "file": "src/app/api/deals/[id]/next-step/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/deals/[id]/meta",
      "file": "src/app/api/deals/[id]/meta/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts/[id]/tasks",
      "file": "src/app/api/contacts/[id]/tasks/route.ts",
      "methods": [
        "GET",
        "POST",
        "PUT"
      ],
      "unsafeMethods": [
        "POST",
        "PUT"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        },
        {
          "type": "transaction",
          "description": "Use tx() for multi-write operations",
          "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
        }
      ]
    },
    {
      "path": "/api/contacts/[id]/notes",
      "file": "src/app/api/contacts/[id]/notes/route.ts",
      "methods": [
        "GET",
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "contacts",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/admin/retention/run",
      "file": "src/app/api/admin/retention/run/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/admin/retention/policy",
      "file": "src/app/api/admin/retention/policy/route.ts",
      "methods": [
        "GET",
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/admin/exports/start",
      "file": "src/app/api/admin/exports/start/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/outreach/conversations/[id]/reply",
      "file": "src/app/api/outreach/conversations/[id]/reply/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "outreach",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/inbox/threads/[id]/reply",
      "file": "src/app/api/inbox/threads/[id]/reply/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    },
    {
      "path": "/api/admin/runs/[runId]/steps/[stepExecId]/replay",
      "file": "src/app/api/admin/runs/[runId]/steps/[stepExecId]/replay/route.ts",
      "methods": [
        "POST"
      ],
      "unsafeMethods": [
        "POST"
      ],
      "protected": false,
      "category": "misc",
      "suggestions": [
        {
          "type": "wrapper",
          "description": "Wrap handler with withIdempotency()",
          "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
        }
      ]
    }
  ],
  "batches": [
    {
      "number": 1,
      "category": "misc",
      "routes": [
        {
          "path": "/api/deals",
          "methods": [
            "POST",
            "GET"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/deals/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/x/refresh",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/x/refresh/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/x/disconnect",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/x/disconnect/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/workspaces/export",
          "methods": [
            "GET",
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/workspaces/export/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/tiktok/status",
          "methods": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ],
          "unsafeMethods": [
            "POST",
            "PUT",
            "DELETE"
          ],
          "file": "src/app/api/tiktok/status/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            },
            {
              "type": "transaction",
              "description": "Use tx() for multi-write operations",
              "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
            }
          ]
        },
        {
          "path": "/api/util/sign",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/util/sign/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/tiktok/refresh",
          "methods": [
            "POST",
            "GET"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/tiktok/refresh/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/tiktok/disconnect",
          "methods": [
            "POST",
            "GET"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/tiktok/disconnect/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "High"
    },
    {
      "number": 2,
      "category": "misc",
      "routes": [
        {
          "path": "/api/workspaces/purge",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/workspaces/purge/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/sequence/dispatch",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/sequence/dispatch/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/sequence/start",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/sequence/start/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/onlyfans/manual",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/onlyfans/manual/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/push/subscribe",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/push/subscribe/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/netfx/playbook",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/netfx/playbook/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/netfx/aggregate",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/netfx/aggregate/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/match/top",
          "methods": [
            "GET",
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/match/top/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "High"
    },
    {
      "number": 3,
      "category": "misc",
      "routes": [
        {
          "path": "/api/match/search",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/match/search/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/linkedin/refresh",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/linkedin/refresh/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/linkedin/disconnect",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/linkedin/disconnect/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/imports/start",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/imports/start/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/inbox/send-reply",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/inbox/send-reply/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/imports/run",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/imports/run/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/imports/map",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/imports/map/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/invite/verify",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/invite/verify/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "High"
    },
    {
      "number": 4,
      "category": "misc",
      "routes": [
        {
          "path": "/api/instagram/refresh",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/instagram/refresh/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/instagram/disconnect",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/instagram/disconnect/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/feedback/submit",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/feedback/submit/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/demo/toggle",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/demo/toggle/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/email/webhook",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/email/webhook/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/evals/run",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/evals/run/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/cron/match-refresh",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/cron/match-refresh/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/deals/redline",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/deals/redline/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "High"
    },
    {
      "number": 5,
      "category": "misc",
      "routes": [
        {
          "path": "/api/deals/counter-offer",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/deals/counter-offer/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/deals/log",
          "methods": [
            "POST",
            "GET"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/deals/log/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/deals/calc",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/deals/calc/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/deals/[id]",
          "methods": [
            "PUT",
            "GET"
          ],
          "unsafeMethods": [
            "PUT"
          ],
          "file": "src/app/api/deals/[id]/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const PUT = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/calendar/book",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/calendar/book/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/calendar/propose",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/calendar/propose/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/billing/webhook",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/billing/webhook/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/billing/reset-daily",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/billing/reset-daily/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "High"
    },
    {
      "number": 6,
      "category": "misc",
      "routes": [
        {
          "path": "/api/billing/checkout",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/billing/checkout/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/billing/portal",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/billing/portal/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/agency/revoke-all",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/agency/revoke-all/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/agency/remove",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/agency/remove/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/agency/list",
          "methods": [
            "GET",
            "POST",
            "DELETE"
          ],
          "unsafeMethods": [
            "POST",
            "DELETE"
          ],
          "file": "src/app/api/agency/list/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            },
            {
              "type": "transaction",
              "description": "Use tx() for multi-write operations",
              "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
            }
          ]
        },
        {
          "path": "/api/agency/invite",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/agency/invite/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/ai/match",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/ai/match/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/ai/analyze",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/ai/analyze/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "High"
    },
    {
      "number": 7,
      "category": "misc",
      "routes": [
        {
          "path": "/api/_util/sign",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/_util/sign/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/admin/login",
          "methods": [
            "POST",
            "GET"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/admin/login/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/ai/generate",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/ai/generate/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/admin/impersonate",
          "methods": [
            "POST",
            "DELETE"
          ],
          "unsafeMethods": [
            "POST",
            "DELETE"
          ],
          "file": "src/app/api/admin/impersonate/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            },
            {
              "type": "transaction",
              "description": "Use tx() for multi-write operations",
              "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
            }
          ]
        },
        {
          "path": "/api/admin/bootstrap",
          "methods": [
            "POST",
            "GET"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/admin/bootstrap/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/imports/[id]/undo",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/imports/[id]/undo/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/deals/[id]/next-step",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/deals/[id]/next-step/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/deals/[id]/meta",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/deals/[id]/meta/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "High"
    },
    {
      "number": 8,
      "category": "misc",
      "routes": [
        {
          "path": "/api/admin/retention/run",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/admin/retention/run/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/admin/retention/policy",
          "methods": [
            "GET",
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/admin/retention/policy/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/admin/exports/start",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/admin/exports/start/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/inbox/threads/[id]/reply",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/inbox/threads/[id]/reply/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/admin/runs/[runId]/steps/[stepExecId]/replay",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/admin/runs/[runId]/steps/[stepExecId]/replay/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "Medium"
    },
    {
      "number": 9,
      "category": "contacts",
      "routes": [
        {
          "path": "/api/contacts",
          "methods": [
            "GET",
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/contacts/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/contacts/import",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/contacts/import/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/contacts/merge",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/contacts/merge/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/contacts/export",
          "methods": [
            "GET",
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/contacts/export/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/contacts/enrich",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/contacts/enrich/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/contacts/bulk-tag",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/contacts/bulk-tag/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/contacts/bulk",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/contacts/bulk/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/contacts/[id]",
          "methods": [
            "GET",
            "PUT",
            "PATCH",
            "DELETE"
          ],
          "unsafeMethods": [
            "PUT",
            "PATCH",
            "DELETE"
          ],
          "file": "src/app/api/contacts/[id]/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const PUT = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            },
            {
              "type": "transaction",
              "description": "Use tx() for multi-write operations",
              "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "High"
    },
    {
      "number": 10,
      "category": "contacts",
      "routes": [
        {
          "path": "/api/contacts/bulk-delete",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/contacts/bulk-delete/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/contacts/[id]/tasks",
          "methods": [
            "GET",
            "POST",
            "PUT"
          ],
          "unsafeMethods": [
            "POST",
            "PUT"
          ],
          "file": "src/app/api/contacts/[id]/tasks/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            },
            {
              "type": "transaction",
              "description": "Use tx() for multi-write operations",
              "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
            }
          ]
        },
        {
          "path": "/api/contacts/[id]/notes",
          "methods": [
            "GET",
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/contacts/[id]/notes/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "Low"
    },
    {
      "number": 11,
      "category": "outreach",
      "routes": [
        {
          "path": "/api/outreach/start",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/outreach/start/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/outreach/inbound",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/outreach/inbound/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/outreach/webhooks/resend",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/outreach/webhooks/resend/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/outreach/inbox/reply",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/outreach/inbox/reply/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/outreach/conversations/[id]/reply",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/outreach/conversations/[id]/reply/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "Medium"
    },
    {
      "number": 12,
      "category": "media-pack",
      "routes": [
        {
          "path": "/api/media-pack/track",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/media-pack/track/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/media-pack/generate-pdf",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/media-pack/generate-pdf/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/media-pack/share",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/media-pack/share/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "Low"
    },
    {
      "number": 13,
      "category": "brand-run",
      "routes": [
        {
          "path": "/api/brand-run/upsert",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/brand-run/upsert/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/brand-run/one-touch",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/brand-run/one-touch/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/brand-run/start",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/brand-run/start/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        },
        {
          "path": "/api/brand-run/advance",
          "methods": [
            "POST"
          ],
          "unsafeMethods": [
            "POST"
          ],
          "file": "src/app/api/brand-run/advance/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "Medium"
    },
    {
      "number": 14,
      "category": "audit",
      "routes": [
        {
          "path": "/api/audit/status",
          "methods": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ],
          "unsafeMethods": [
            "POST",
            "PUT",
            "DELETE"
          ],
          "file": "src/app/api/audit/status/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            },
            {
              "type": "transaction",
              "description": "Use tx() for multi-write operations",
              "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
            }
          ]
        },
        {
          "path": "/api/audit/latest",
          "methods": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ],
          "unsafeMethods": [
            "POST",
            "PUT",
            "DELETE"
          ],
          "file": "src/app/api/audit/latest/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            },
            {
              "type": "transaction",
              "description": "Use tx() for multi-write operations",
              "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
            }
          ]
        },
        {
          "path": "/api/audit/get",
          "methods": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ],
          "unsafeMethods": [
            "POST",
            "PUT",
            "DELETE"
          ],
          "file": "src/app/api/audit/get/route.ts",
          "suggestions": [
            {
              "type": "wrapper",
              "description": "Wrap handler with withIdempotency()",
              "code": "import { withIdempotency } from '@/lib/idempotency';\n\nexport const POST = withIdempotency(async (request) => {\n  // Your existing handler code here\n});"
            },
            {
              "type": "transaction",
              "description": "Use tx() for multi-write operations",
              "code": "import { tx } from '@/lib/idempotency';\n\n// Wrap database operations with tx()\nconst result = await tx(async (prisma) => {\n  // Your database operations here\n});"
            }
          ]
        }
      ],
      "estimatedEffort": "Low"
    }
  ]
}