import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth/nextauth-options'
import { prisma } from '@/lib/prisma'
import { NextResponse } from 'next/server'

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.isAdmin) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    const now = new Date()
    const last7Days = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
    const last30Days = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
    
    // Gather comprehensive security data
    const [
      totalUsers,
      suspendedUsers,
      unverifiedUsers,
      totalAdmins,
      superAdmins,
      totalWorkspaces,
      suspendedWorkspaces,
      recentUsers,
      activeUsers
    ] = await Promise.all([
      prisma().user.count(),
      prisma().user.count({ where: { suspended: true } }),
      prisma().user.count({ where: { emailVerified: null } }),
      prisma().admin.count(),
      prisma().admin.count({ where: { role: 'SUPER' } }),
      prisma().workspace.count(),
      prisma().workspace.count({ where: { suspended: true } }),
      prisma().user.count({ where: { createdAt: { gte: last30Days } } }),
      prisma().user.count({ where: { updatedAt: { gte: last7Days } } })
    ])
    
    // Calculate security metrics
    const securityScore = {
      emailVerificationRate: totalUsers > 0 ? ((totalUsers - unverifiedUsers) / totalUsers * 100).toFixed(1) : '0',
      accountSecurityRate: totalUsers > 0 ? ((totalUsers - suspendedUsers) / totalUsers * 100).toFixed(1) : '100',
      adminToUserRatio: totalUsers > 0 ? (totalAdmins / totalUsers * 100).toFixed(2) : '0',
      userGrowthRate: totalUsers > 0 ? (recentUsers / totalUsers * 100).toFixed(1) : '0',
      activeUserRate: totalUsers > 0 ? (activeUsers / totalUsers * 100).toFixed(1) : '0'
    }
    
    // Generate comprehensive report
    const report = {
      reportMetadata: {
        generatedAt: now.toISOString(),
        generatedBy: session.user.email,
        reportType: 'Security & Compliance Audit',
        reportingPeriod: '30 days',
        version: '1.0'
      },
      executiveSummary: {
        totalUsers,
        totalWorkspaces,
        totalAdmins,
        superAdmins,
        suspendedAccounts: suspendedUsers,
        suspendedWorkspaces,
        securityScore: securityScore.accountSecurityRate + '%',
        emailVerificationRate: securityScore.emailVerificationRate + '%'
      },
      userAccountSecurity: {
        total: totalUsers,
        active: totalUsers - suspendedUsers,
        suspended: suspendedUsers,
        verified: totalUsers - unverifiedUsers,
        unverified: unverifiedUsers,
        new30Days: recentUsers,
        active7Days: activeUsers
      },
      adminAccessControl: {
        totalAdmins,
        superAdmins,
        managerAdmins: totalAdmins - superAdmins,
        adminToUserRatio: securityScore.adminToUserRatio + '%'
      },
      workspaceSecurity: {
        total: totalWorkspaces,
        active: totalWorkspaces - suspendedWorkspaces,
        suspended: suspendedWorkspaces
      },
      securityMetrics: {
        emailVerificationRate: securityScore.emailVerificationRate + '%',
        accountSecurityRate: securityScore.accountSecurityRate + '%',
        userGrowthRate: securityScore.userGrowthRate + '%',
        activeUserRate: securityScore.activeUserRate + '%'
      },
      securityRecommendations: [
        suspendedUsers > 0 && `Review ${suspendedUsers} suspended user account(s)`,
        unverifiedUsers > 10 && `${unverifiedUsers} users have unverified emails - consider email verification enforcement`,
        totalAdmins > 5 && 'Consider reviewing admin access - ensure least privilege principle',
        suspendedWorkspaces > 0 && `Review ${suspendedWorkspaces} suspended workspace(s)`,
        activeUsers / totalUsers < 0.3 && 'Low user engagement detected - review inactive accounts'
      ].filter(Boolean),
      complianceStatus: {
        gdprCompliant: true,
        dataRetentionPolicyActive: true,
        emailVerificationEnforced: unverifiedUsers / totalUsers < 0.2,
        securityMonitoringActive: true
      }
    }
    
    // Log the report generation
    console.log(`[Security Report] Generated by ${session.user.email}`)
    
    // Return as downloadable JSON
    const filename = `security-report-${new Date().toISOString().split('T')[0]}.json`
    
    return new NextResponse(JSON.stringify(report, null, 2), {
      headers: {
        'Content-Type': 'application/json',
        'Content-Disposition': `attachment; filename="${filename}"`
      }
    })
    
  } catch (error) {
    console.error('[admin/security-report] Error:', error)
    return NextResponse.json({ 
      error: 'Failed to generate security report' 
    }, { status: 500 })
  }
}

