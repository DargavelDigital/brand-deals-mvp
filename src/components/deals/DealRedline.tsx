'use client';

import { useState } from 'react';
import { Card } from '@/components/ui/Card';
import { Input } from '@/components/ui/Input';
import { Select } from '@/components/ui/Select';
import { Button } from '@/components/ui/Button';

interface RiskItem {
  clause: string;
  issue: string;
  riskLevel: 'Low' | 'Medium' | 'High' | 'Critical';
  suggestion: string;
  category: string;
}

interface RedlineResult {
  summary: string;
  risks: RiskItem[];
  recommendations: string[];
  overallRisk: 'Low' | 'Medium' | 'High' | 'Critical';
}

const CREATOR_TYPES = [
  { value: 'influencer', label: 'Influencer' },
  { value: 'content-creator', label: 'Content Creator' },
  { value: 'artist', label: 'Artist' },
  { value: 'consultant', label: 'Consultant' },
];

const getRiskColor = (riskLevel: string) => {
  switch (riskLevel) {
    case 'Low': return 'text-green-600 bg-green-100';
    case 'Medium': return 'text-yellow-600 bg-yellow-100';
    case 'High': return 'text-orange-600 bg-orange-100';
    case 'Critical': return 'text-red-600 bg-red-100';
    default: return 'text-gray-600 bg-gray-100';
  }
};

export function DealRedline() {
  const [sowText, setSowText] = useState('');
  const [creatorType, setCreatorType] = useState('influencer');
  const [industry, setIndustry] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [result, setResult] = useState<RedlineResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const analyzeSOW = async () => {
    if (!sowText.trim()) {
      setError('Please enter SOW text to analyze');
      return;
    }

    setIsAnalyzing(true);
    setError(null);

    try {
      const response = await fetch('/api/deals/redline', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          sowText: sowText.trim(),
          creatorType,
          industry: industry || undefined,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to analyze SOW');
      }

      const analysis = await response.json();
      setResult(analysis);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const downloadRedlinedSOW = () => {
    if (!result) return;

    const content = `SOW REDLINE ANALYSIS
Generated on: ${new Date().toLocaleDateString()}

OVERALL RISK ASSESSMENT: ${result.overallRisk}

SUMMARY:
${result.summary}

DETAILED RISK ANALYSIS:
${result.risks.map((risk, index) => `
${index + 1}. RISK LEVEL: ${risk.riskLevel}
   Category: ${risk.category}
   Clause: "${risk.clause}"
   Issue: ${risk.issue}
   Suggestion: ${risk.suggestion}
`).join('\n')}

RECOMMENDATIONS:
${result.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

---
This analysis was generated by AI and should be reviewed by legal professionals.
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'sow-redline-analysis.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <h2 className="text-2xl font-bold">SOW Redline Helper</h2>
        <p className="text-gray-600">
          Analyze brand Statements of Work to identify risky contract clauses and get improvement suggestions.
        </p>
      </div>

      <Card className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label htmlFor="creator-type" className="block text-sm font-medium mb-2">
              Creator Type
            </label>
            <Select
              id="creator-type"
              value={creatorType}
              onValueChange={setCreatorType}
            >
              {CREATOR_TYPES.map((type) => (
                <option key={type.value} value={type.value}>
                  {type.label}
                </option>
              ))}
            </Select>
          </div>

          <div>
            <label htmlFor="industry" className="block text-sm font-medium mb-2">
              Industry (Optional)
            </label>
            <Input
              id="industry"
              value={industry}
              onChange={(e) => setIndustry(e.target.value)}
              placeholder="Beauty, Tech, Fashion, etc."
            />
          </div>
        </div>

        <div className="mb-4">
          <label htmlFor="sow-text" className="block text-sm font-medium mb-2">
            SOW Text *
          </label>
          <textarea
            id="sow-text"
            value={sowText}
            onChange={(e) => setSowText(e.target.value)}
            placeholder="Paste the full text of the Statement of Work here..."
            className="w-full h-48 p-3 border border-gray-300 rounded-md resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            required
          />
        </div>

        <Button
          onClick={analyzeSOW}
          disabled={isAnalyzing || !sowText.trim()}
          className="w-full md:w-auto"
        >
          {isAnalyzing ? 'Analyzing...' : 'Analyze SOW'}
        </Button>
      </Card>

      {error && (
        <div className="text-[var(--error)] text-sm">
          {error}
        </div>
      )}

      {result && (
        <div className="space-y-6">
          <Card className="p-6">
            <div className="flex justify-between items-start mb-4">
              <div>
                <h3 className="text-xl font-semibold">Analysis Results</h3>
                <p className="text-gray-600">{result.summary}</p>
              </div>
              <div className="flex items-center space-x-3">
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${getRiskColor(result.overallRisk)}`}>
                  {result.overallRisk} Risk
                </span>
                <Button
                  onClick={downloadRedlinedSOW}
                  variant="outline"
                  size="sm"
                >
                  Download Analysis
                </Button>
              </div>
            </div>

            <div className="space-y-4">
              {result.risks.map((risk, index) => (
                <div key={index} className="border-l-4 border-gray-200 pl-4 py-3">
                  <div className="flex items-start justify-between mb-2">
                    <span className={`px-2 py-1 rounded text-xs font-medium ${getRiskColor(risk.riskLevel)}`}>
                      {risk.riskLevel} Risk
                    </span>
                    <span className="text-xs text-gray-500 capitalize">
                      {risk.category.replace('-', ' ')}
                    </span>
                  </div>
                  
                  <div className="mb-2">
                    <h4 className="font-medium text-gray-900 mb-1">Problematic Clause:</h4>
                    <p className="text-sm text-gray-700 bg-gray-50 p-2 rounded italic">
                      "{risk.clause}"
                    </p>
                  </div>
                  
                  <div className="mb-2">
                    <h4 className="font-medium text-gray-900 mb-1">Issue:</h4>
                    <p className="text-sm text-gray-700">{risk.issue}</p>
                  </div>
                  
                  <div>
                    <h4 className="font-medium text-gray-900 mb-1">Suggestion:</h4>
                    <p className="text-sm text-gray-700">{risk.suggestion}</p>
                  </div>
                </div>
              ))}
            </div>
          </Card>

          <Card className="p-6">
            <h4 className="text-lg font-semibold mb-4">General Recommendations</h4>
            <ul className="space-y-2">
              {result.recommendations.map((rec, index) => (
                <li key={index} className="flex items-start">
                  <span className="text-blue-500 mr-2">â€¢</span>
                  <span className="text-sm text-gray-700">{rec}</span>
                </li>
              ))}
            </ul>
          </Card>
        </div>
      )}
    </div>
  );
}
