generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  memberships   Membership[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  featureFlags      Json?              @default("{}")
  deletedAt         DateTime?
  aiTokensBalance   Int                @default(0)
  emailBalance      Int                @default(0)
  emailDailyUsed    Int                @default(0)
  periodEnd         DateTime?
  periodStart       DateTime?
  plan              Plan               @default(FREE)
  stripeCustomerId  String?            @unique
  stripeSubId       String?
  aiUsageEvents     AiUsageEvent[]
  audits            Audit[]
  auditLogs         AuditLog[]
  brands            Brand[]
  brandMatches      BrandMatch[]
  brandRuns         BrandRun[]
  Contact           Contact[]
  conversations     Conversation[]
  creditLedger      CreditLedger[]
  deals             Deal[]
  emailTemplates    EmailTemplate[]
  encryptedSecrets  EncryptedSecret[]
  mediaPacks        MediaPack[]
  memberships       Membership[]
  outreachSequences OutreachSequence[]
  subscriptions     Subscription?
  notifications     Notification[]     @relation("WorkspaceNotifications")
  inboxThreads      InboxThread[]      @relation("WorkspaceInboxThreads")
  importJobs        ImportJob[]        @relation("WorkspaceImportJobs")


  @@index([deletedAt])
}

model Audit {
  id           String    @id @default(cuid())
  workspaceId  String
  sources      String[]  @default([])
  snapshotJson Json?
  createdAt    DateTime  @default(now())
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model Brand {
  id                String             @id @default(cuid())
  name              String
  description       String?
  logo              String?
  website           String?
  industry          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  workspaceId       String
  workspace         Workspace          @relation(fields: [workspaceId], references: [id])
  brandMatches      BrandMatch[]
  profile           BrandProfile?
  Contact           Contact[]
  conversations     Conversation[]
  deals             Deal[]
  outreachSequences OutreachSequence[]

  @@unique([workspaceId, name])
}

model BrandProfile {
  id                  String   @id @default(cuid())
  brandId             String   @unique
  logoUrl             String?
  primaryColor        String?
  secondaryColor      String?
  categories          String[]
  domain              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  brandPrimaryColor   String?
  brandSecondaryColor String?
  brand               Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
}

model Deal {
  id          String     @id @default(cuid())
  title       String
  description String?
  value       Float?
  status      DealStatus @default(PENDING)
  brandId     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workspaceId String
  brand       Brand      @relation(fields: [brandId], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
}

model Subscription {
  id          String    @id @default(cuid())
  workspaceId String    @unique
  plan        String    @default("STARTER")
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model CreditLedger {
  id           String     @id @default(cuid())
  workspaceId  String
  createdAt    DateTime   @default(now())
  balanceAfter Int
  delta        Int
  kind         CreditKind
  reason       String?
  ref          String?
  workspace    Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model EmailTemplate {
  id          String    @id @default(cuid())
  key         String
  name        String
  subject     String
  body        String
  variables   String[]
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, key])
}

model MediaPack {
  id                String             @id @default(cuid())
  variant           String             @default("classic")
  htmlUrl           String?
  pdfUrl            String?
  workspaceId       String
  creatorId         String?
  demo              Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  brandIds          String[]           @default([])
  shareToken        String?
  theme             Json?
  workspace         Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  views             MediaPackView[]
  outreachSequences OutreachSequence[]

  @@index([workspaceId, variant])
}

model MediaPackView {
  id          String    @id @default(cuid())
  mediaPackId String
  traceId     String
  ipHash      String?
  userAgent   String?
  openedAt    DateTime  @default(now())
  dwellMs     Int?
  mediaPack   MediaPack @relation(fields: [mediaPackId], references: [id], onDelete: Cascade)

  @@index([mediaPackId])
  @@index([openedAt])
}

model BrandRun {
  id               String    @id @default(cuid())
  workspaceId      String
  step             String
  auto             Boolean   @default(false)
  selectedBrandIds String[]  @default([])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  runSummaryJson   Json?
  stepStatuses     Json?
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, step])
}

model BrandMatch {
  id          String    @id @default(cuid())
  workspaceId String
  brandId     String
  score       Int
  reasons     String[]  @default([])
  createdAt   DateTime  @default(now())
  brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, brandId])
  @@index([workspaceId, score])
}

model Contact {
  id             String                    @id
  workspaceId    String
  brandId        String?
  name           String
  title          String?
  email          String
  phone          String?
  company        String?
  seniority      String?
  verifiedStatus ContactVerificationStatus @default(UNVERIFIED)
  score          Int                       @default(0)
  source         String?
  tags           String[]                  @default([])
  notes          String?
  lastContacted  DateTime?
  status         ContactStatus             @default(ACTIVE)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime
  Brand          Brand?                    @relation(fields: [brandId], references: [id])
  Workspace      Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  conversations  Conversation[]
  sequenceSteps  SequenceStep[]

  @@unique([workspaceId, email])
  @@index([workspaceId, brandId])
  @@index([workspaceId, status])
}

model BrandCandidateCache {
  id          String   @id @default(cuid())
  workspaceId String
  term        String?
  domain      String?
  payload     Json
  expiresAt   DateTime?
  discoveredAt DateTime @default(now())
  refreshedAt  DateTime @updatedAt


  
  @@index([workspaceId, term])
  @@index([workspaceId, domain])
  @@index([workspaceId, discoveredAt])
  @@index([expiresAt])
}

model OutreachSequence {
  id            String         @id @default(cuid())
  workspaceId   String
  brandId       String
  mediaPackId   String?
  name          String
  status        SequenceStatus @default(DRAFT)
  totalSteps    Int
  currentStep   Int            @default(1)
  settings      Json
  tone          String?
  fromEmail     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  brand         Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  mediaPack     MediaPack?     @relation(fields: [mediaPackId], references: [id])
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  steps         SequenceStep[]

  @@index([workspaceId, status])
}

model SequenceStep {
  id            String           @id @default(cuid())
  sequenceId    String
  contactId     String
  stepNumber    Int
  scheduledAt   DateTime
  status        StepStatus       @default(PENDING)
  sentAt        DateTime?
  openedAt      DateTime?
  clickedAt     DateTime?
  repliedAt     DateTime?
  bouncedAt     DateTime?
  provider      String?
  providerMsgId String?
  threadKey     String?
  subject       String?
  html          String?
  text          String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  contact       Contact          @relation(fields: [contactId], references: [id])
  sequence      OutreachSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)

  @@index([sequenceId, stepNumber])
  @@index([contactId])
  @@index([scheduledAt])
  @@index([status])
  @@index([providerMsgId])
  @@index([threadKey])
}

model Conversation {
  id          String            @id @default(cuid())
  workspaceId String
  sequenceId  String?
  brandId     String?
  contactId   String
  subject     String?
  threadKey   String            @unique
  lastAt      DateTime          @default(now())
  brand       Brand?            @relation(fields: [brandId], references: [id])
  contact     Contact           @relation(fields: [contactId], references: [id], onDelete: Cascade)
  sequence    OutreachSequence? @relation(fields: [sequenceId], references: [id])
  workspace   Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@index([workspaceId])
  @@index([sequenceId])
  @@index([contactId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  direction      String
  provider       String?
  providerMsgId  String?
  inReplyTo      String?
  fromAddr       String?
  toAddr         String?
  subject        String?
  text           String?
  html           String?
  status         String?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([providerMsgId])
}

model SocialSnapshotCache {
  id          String   @id @default(cuid())
  workspaceId String
  platform    String
  externalId  String
  payload     Json
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  @@index([workspaceId, platform, externalId])
  @@index([expiresAt])
}

model AiUsageEvent {
  id            String    @id @default(cuid())
  workspaceId   String
  traceId       String    @default(uuid())
  packKey       String
  provider      String
  model         String
  inputTokens   Int       @default(0)
  outputTokens  Int       @default(0)
  inputCostUsd  Float     @default(0)
  outputCostUsd Float     @default(0)
  totalCostUsd  Float     @default(0)
  dryRun        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
  @@index([traceId])
}

model Membership {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        Role
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId, role])
}

model AuditLog {
  id          String    @id @default(cuid())
  workspaceId String
  actorUserId String?
  action      String
  targetType  String?
  targetId    String?
  meta        Json?
  createdAt   DateTime  @default(now())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model EncryptedSecret {
  id          String     @id @default(cuid())
  workspaceId String?
  key         String
  enc         Bytes
  iv          Bytes
  tag         Bytes
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, key])
}

model Notification {
  id          String   @id @default(cuid())
  workspaceId String
  type        String // 'audit.progress' | 'pack.progress' | 'outreach.reply' | ...
  title       String
  message     String?
  payload     Json?
  seen        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Back-reference to Workspace with named relation
  workspace Workspace @relation("WorkspaceNotifications", fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model DigestPreference {
  id          String   @id @default(cuid())
  workspaceId String   @unique
  cadence     String // 'daily' | 'weekly' | 'off'
  hourOfDay   Int      @default(9) // local hour
  timezone    String   @default("UTC")
  updatedAt   DateTime @updatedAt
}

model InboxThread {
  id            String       @id @default(cuid())
  workspaceId   String
  sequenceId    String?
  contactId     String
  brandId       String?
  subject       String
  status        ThreadStatus @default(OPEN) // OPEN | WAITING | WON | LOST | CLOSED
  lastMessageAt DateTime     @default(now())
  createdAt     DateTime     @default(now())

  // Back-reference to Workspace with named relation
  workspace Workspace @relation("WorkspaceInboxThreads", fields: [workspaceId], references: [id], onDelete: Cascade)

  messages InboxMessage[]

  @@index([workspaceId, lastMessageAt])
  @@index([sequenceId])
}

model InboxMessage {
  id         String   @id @default(cuid())
  threadId   String
  role       String // 'inbound' | 'outbound' | 'system'
  fromEmail  String
  toEmail    String
  externalId String? // provider messageId
  subject    String?
  text       String?
  html       String?
  createdAt  DateTime @default(now())

  thread InboxThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt])
}

enum Plan {
  FREE
  PRO
  TEAM
}

enum CreditKind {
  AI
  EMAIL
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum DealStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ContactVerificationStatus {
  UNVERIFIED
  VALID
  RISKY
  INVALID
}

enum SequenceStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum StepStatus {
  PENDING
  SENT
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
}

enum ThreadStatus {
  OPEN
  WAITING
  WON
  LOST
  CLOSED
}

// Epic 13: Importers, Integrations & CRM Sync
model ImportJob {
  id           String       @id @default(cuid())
  workspaceId  String
  kind         ImportKind   // 'BRAND' | 'CONTACT' | 'DEAL'
  source       ImportSource // 'CSV' | 'GSHEETS'
  status       ImportStatus @default(RECEIVED)
  fileUrl      String?      // uploaded CSV or exported sheet URL
  sheetId      String?      // Google sheet id
  sheetRange   String?      // A1 notation
  totalRows    Int? 
  processed    Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  summaryJson  Json?

  workspace    Workspace   @relation("WorkspaceImportJobs", fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, kind, status])
}

model DedupeFingerprint {
  id           String   @id @default(cuid())
  workspaceId  String
  entity       String   // 'BRAND' | 'CONTACT' | 'DEAL'
  key          String   // normalized unique key (email, domain, brand:name+domain)
  entityId     String   // points to Brand/Contact/Deal.id
  createdAt    DateTime @default(now())
  
  @@unique([workspaceId, entity, key])
  @@index([workspaceId, entity])
}

enum ImportKind { 
  BRAND 
  CONTACT 
  DEAL 
}

enum ImportSource { 
  CSV 
  GSHEETS 
}

enum ImportStatus { 
  RECEIVED 
  MAPPING 
  RUNNING 
  COMPLETED 
  FAILED 
  CANCELED 
}


