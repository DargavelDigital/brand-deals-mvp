generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String        @id @default(cuid())
  name               String?
  email              String?       @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  accounts           Account[]
  activityLogs       ActivityLog[]
  aiFeedbacks        AiFeedback[]
  invitedMemberships Membership[]  @relation("InvitedMemberships")
  memberships        Membership[]
  sessions           Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id                    String                 @id @default(cuid())
  name                  String
  slug                  String                 @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  featureFlags          Json?                  @default("{}")
  deletedAt             DateTime?
  aiTokensBalance       Int                    @default(0)
  emailBalance          Int                    @default(0)
  emailDailyUsed        Int                    @default(0)
  periodEnd             DateTime?
  periodStart           DateTime?
  plan                  Plan                   @default(FREE)
  stripeCustomerId      String?                @unique
  stripeSubId           String?
  activityLogs          ActivityLog[]
  adminActionLogs       AdminActionLog[]
  aiFeedbacks           AiFeedback[]
  aiUsageEvents         AiUsageEvent[]
  audits                Audit[]
  auditLogs             AuditLog[]
  brands                Brand[]
  brandMatches          BrandMatch[]
  brandRuns             BrandRun[]
  Contact               Contact[]
  contactNotes          ContactNote[]
  contactTasks          ContactTask[]
  contentSafetyChecks   ContentSafetyCheck[]
  conversations         Conversation[]
  creditLedger          CreditLedger[]
  deals                 Deal[]
  emailTemplates        EmailTemplate[]
  encryptedSecrets      EncryptedSecret[]
  errorEvents           ErrorEvent[]
  exportJobs            ExportJob[]
  impersonationSessions ImpersonationSession[]
  importJobs            ImportJob[]            @relation("WorkspaceImportJobs")
  inboxThreads          InboxThread[]          @relation("WorkspaceInboxThreads")
  mediaPacks            MediaPack[]
  memberships           Membership[]
  notifications         Notification[]         @relation("WorkspaceNotifications")
  outreachSequences     OutreachSequence[]
  pushSubscriptions     PushSubscription[]
  retentionPolicy       RetentionPolicy?
  signalEvents          SignalEvent[]
  socialAccounts        SocialAccount[]
  subscriptions         Subscription?

  @@index([deletedAt])
}

model Audit {
  id           String    @id @default(cuid())
  workspaceId  String
  sources      String[]  @default([])
  snapshotJson Json?
  createdAt    DateTime  @default(now())
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model Brand {
  id                String             @id @default(cuid())
  name              String
  description       String?
  logo              String?
  website           String?
  industry          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  workspaceId       String
  workspace         Workspace          @relation(fields: [workspaceId], references: [id])
  brandMatches      BrandMatch[]
  profile           BrandProfile?
  Contact           Contact[]
  conversations     Conversation[]
  deals             Deal[]
  outreachSequences OutreachSequence[]

  @@unique([workspaceId, name])
}

model BrandProfile {
  id                  String   @id @default(cuid())
  brandId             String   @unique
  logoUrl             String?
  primaryColor        String?
  secondaryColor      String?
  categories          String[]
  domain              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  brandPrimaryColor   String?
  brandSecondaryColor String?
  brand               Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
}

model Deal {
  id            String     @id @default(cuid())
  title         String
  description   String?
  value         Float?
  status        DealStatus @default(OPEN)
  brandId       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  workspaceId   String
  category      String?
  counterAmount Int?
  creatorId     String?
  finalAmount   Int?
  offerAmount   Int
  brand         Brand      @relation(fields: [brandId], references: [id])
  workspace     Workspace  @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId, status])
  @@index([workspaceId, category])
  @@index([workspaceId, createdAt])
}

model Subscription {
  id          String    @id @default(cuid())
  workspaceId String    @unique
  plan        String    @default("STARTER")
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model CreditLedger {
  id           String     @id @default(cuid())
  workspaceId  String
  createdAt    DateTime   @default(now())
  balanceAfter Int
  delta        Int
  kind         CreditKind
  reason       String?
  ref          String?
  workspace    Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model EmailTemplate {
  id          String    @id @default(cuid())
  key         String
  name        String
  subject     String
  body        String
  variables   String[]
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, key])
}

model MediaPack {
  id                String                @id @default(cuid())
  variant           String                @default("classic")
  htmlUrl           String?
  pdfUrl            String?
  workspaceId       String
  creatorId         String?
  demo              Boolean               @default(false)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  brandIds          String[]              @default([])
  shareToken        String?               @unique
  theme             Json?
  brandId           String?
  sequenceId        String?
  payload           Json?
  workspace         Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  clicks            MediaPackClick[]
  conversions       MediaPackConversion[]
  dailyStats        MediaPackDaily[]
  tracking          MediaPackTracking[]
  views             MediaPackView[]
  outreachSequences OutreachSequence[]

  @@index([brandId])
  @@index([sequenceId])
  @@index([workspaceId, variant])
}

model MediaPackView {
  id          String    @id @default(cuid())
  mediaPackId String
  createdAt   DateTime  @default(now())
  variant     String
  brandId     String?
  contactId   String?
  dwellMs     Int?
  ipHash      String?
  referrer    String?
  scrollDepth Int?
  sequenceId  String?
  sessionId   String
  stepId      String?
  ua          String?
  utmCampaign String?
  utmMedium   String?
  utmSource   String?
  visitorId   String
  workspaceId String
  mediaPack   MediaPack @relation(fields: [mediaPackId], references: [id], onDelete: Cascade)

  @@index([mediaPackId, createdAt])
  @@index([workspaceId, createdAt])
  @@index([variant])
}

model MediaPackClick {
  id          String    @id @default(cuid())
  mediaPackId String
  variant     String
  workspaceId String
  ctaId       String
  href        String
  sequenceId  String?
  brandId     String?
  stepId      String?
  contactId   String?
  visitorId   String
  sessionId   String
  createdAt   DateTime  @default(now())
  mediaPack   MediaPack @relation(fields: [mediaPackId], references: [id], onDelete: Cascade)

  @@index([mediaPackId, createdAt])
  @@index([workspaceId, createdAt])
  @@index([variant])
}

model MediaPackConversion {
  id          String    @id @default(cuid())
  mediaPackId String
  brandId     String?
  type        String
  createdAt   DateTime  @default(now())
  contactId   String?
  sequenceId  String?
  sessionId   String
  stepId      String?
  value       Float?
  variant     String
  visitorId   String
  workspaceId String
  mediaPack   MediaPack @relation(fields: [mediaPackId], references: [id], onDelete: Cascade)

  @@index([mediaPackId, createdAt])
  @@index([workspaceId, createdAt])
  @@index([type])
}

model MediaPackDaily {
  id          String    @id @default(cuid())
  mediaPackId String
  date        DateTime
  variant     String
  views       Int       @default(0)
  clicks      Int       @default(0)
  conversions Int       @default(0)
  ctr         Float     @default(0)
  cvr         Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  mediaPack   MediaPack @relation(fields: [mediaPackId], references: [id], onDelete: Cascade)

  @@unique([mediaPackId, date, variant])
  @@index([mediaPackId, date])
}

model MediaPackTracking {
  id          String    @id @default(cuid())
  mediaPackId String
  event       String
  cta         String?
  durationMs  Int?
  referer     String?
  userAgent   String?
  ipHash      String?
  createdAt   DateTime  @default(now())
  mediaPack   MediaPack @relation(fields: [mediaPackId], references: [id], onDelete: Cascade)

  @@index([mediaPackId, event])
  @@index([createdAt])
}

model BrandRun {
  id               String             @id @default(cuid())
  workspaceId      String
  step             String
  auto             Boolean            @default(false)
  selectedBrandIds String[]           @default([])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  runSummaryJson   Json?
  stepStatuses     Json?
  workspace        Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  stepExecutions   RunStepExecution[]

  @@index([workspaceId, step])
}

model BrandMatch {
  id          String    @id @default(cuid())
  workspaceId String
  brandId     String
  score       Int
  reasons     String[]  @default([])
  createdAt   DateTime  @default(now())
  brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, brandId])
  @@index([workspaceId, score])
}

model Contact {
  id             String                    @id
  workspaceId    String
  brandId        String?
  name           String
  title          String?
  email          String
  phone          String?
  company        String?
  seniority      String?
  verifiedStatus ContactVerificationStatus @default(UNVERIFIED)
  score          Int                       @default(0)
  source         String?
  tags           String[]                  @default([])
  notes          String?
  lastContacted  DateTime?
  status         ContactStatus             @default(ACTIVE)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime
  nextStep       String?
  remindAt       DateTime?
  Brand          Brand?                    @relation(fields: [brandId], references: [id])
  Workspace      Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  contactNotes   ContactNote[]
  contactTasks   ContactTask[]
  conversations  Conversation[]
  inboxThreads   InboxThread[]
  sequenceSteps  SequenceStep[]

  @@unique([workspaceId, email])
  @@index([workspaceId, brandId])
  @@index([workspaceId, status])
}

model BrandCandidateCache {
  id           String    @id @default(cuid())
  workspaceId  String
  term         String?
  payload      Json
  expiresAt    DateTime?
  discoveredAt DateTime  @default(now())
  domain       String?
  refreshedAt  DateTime  @updatedAt

  @@index([workspaceId, term])
  @@index([workspaceId, domain])
  @@index([workspaceId, discoveredAt])
  @@index([expiresAt])
}

model OutreachSequence {
  id            String         @id @default(cuid())
  workspaceId   String
  brandId       String
  mediaPackId   String?
  name          String
  status        SequenceStatus @default(DRAFT)
  totalSteps    Int
  currentStep   Int            @default(1)
  settings      Json
  tone          String?
  fromEmail     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  brand         Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  mediaPack     MediaPack?     @relation(fields: [mediaPackId], references: [id])
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  steps         SequenceStep[]

  @@index([workspaceId, status])
}

model SequenceStep {
  id            String           @id @default(cuid())
  sequenceId    String
  contactId     String
  stepNumber    Int
  scheduledAt   DateTime
  status        StepStatus       @default(PENDING)
  sentAt        DateTime?
  openedAt      DateTime?
  clickedAt     DateTime?
  repliedAt     DateTime?
  bouncedAt     DateTime?
  provider      String?
  providerMsgId String?
  threadKey     String?
  subject       String?
  html          String?
  text          String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  contact       Contact          @relation(fields: [contactId], references: [id])
  sequence      OutreachSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)

  @@index([sequenceId, stepNumber])
  @@index([contactId])
  @@index([scheduledAt])
  @@index([status])
  @@index([providerMsgId])
  @@index([threadKey])
}

model Conversation {
  id          String            @id @default(cuid())
  workspaceId String
  sequenceId  String?
  brandId     String?
  contactId   String
  subject     String?
  threadKey   String            @unique
  lastAt      DateTime          @default(now())
  brand       Brand?            @relation(fields: [brandId], references: [id])
  contact     Contact           @relation(fields: [contactId], references: [id], onDelete: Cascade)
  sequence    OutreachSequence? @relation(fields: [sequenceId], references: [id])
  workspace   Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@index([workspaceId])
  @@index([sequenceId])
  @@index([contactId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  direction      String
  provider       String?
  providerMsgId  String?
  inReplyTo      String?
  fromAddr       String?
  toAddr         String?
  subject        String?
  text           String?
  html           String?
  status         String?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([providerMsgId])
}

model SocialSnapshotCache {
  id          String   @id @default(cuid())
  workspaceId String
  platform    String
  externalId  String
  payload     Json
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  @@index([workspaceId, platform, externalId])
  @@index([expiresAt])
}

model AiUsageEvent {
  id            String    @id @default(cuid())
  workspaceId   String
  traceId       String    @default(uuid())
  packKey       String
  provider      String
  model         String
  inputTokens   Int       @default(0)
  outputTokens  Int       @default(0)
  inputCostUsd  Float     @default(0)
  outputCostUsd Float     @default(0)
  totalCostUsd  Float     @default(0)
  dryRun        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
  @@index([traceId])
}

model Membership {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        Role
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  invitedById String?
  invitedBy   User?     @relation("InvitedMemberships", fields: [invitedById], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId, role])
  @@index([invitedById])
}

model AuditLog {
  id          String    @id @default(cuid())
  workspaceId String
  actorUserId String?
  action      String
  targetType  String?
  targetId    String?
  meta        Json?
  createdAt   DateTime  @default(now())
  adminId     String?
  ip          String?
  traceId     String?
  ua          String?
  admin       Admin?    @relation(fields: [adminId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model EncryptedSecret {
  id          String     @id @default(cuid())
  workspaceId String?
  key         String
  enc         Bytes
  iv          Bytes
  tag         Bytes
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, key])
}

model Notification {
  id          String    @id @default(cuid())
  workspaceId String
  type        String
  title       String
  message     String?
  payload     Json?
  seen        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  workspace   Workspace @relation("WorkspaceNotifications", fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model DigestPreference {
  id          String   @id @default(cuid())
  workspaceId String   @unique
  cadence     String
  hourOfDay   Int      @default(9)
  timezone    String   @default("UTC")
  updatedAt   DateTime @updatedAt
}

model InboxThread {
  id            String         @id @default(cuid())
  workspaceId   String
  sequenceId    String?
  contactId     String
  brandId       String?
  subject       String
  status        ThreadStatus   @default(OPEN)
  lastMessageAt DateTime       @default(now())
  createdAt     DateTime       @default(now())
  messages      InboxMessage[]
  contact       Contact        @relation(fields: [contactId], references: [id], onDelete: Cascade)
  workspace     Workspace      @relation("WorkspaceInboxThreads", fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, lastMessageAt])
  @@index([sequenceId])
  @@index([contactId])
}

model InboxMessage {
  id         String      @id @default(cuid())
  threadId   String
  role       String
  fromEmail  String
  toEmail    String
  externalId String?
  subject    String?
  text       String?
  html       String?
  createdAt  DateTime    @default(now())
  thread     InboxThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt])
}

model ImportJob {
  id          String       @id @default(cuid())
  workspaceId String
  kind        ImportKind
  source      ImportSource
  status      ImportStatus @default(RECEIVED)
  fileUrl     String?
  sheetId     String?
  sheetRange  String?
  totalRows   Int?
  processed   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  summaryJson Json?
  workspace   Workspace    @relation("WorkspaceImportJobs", fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, kind, status])
}

model DedupeFingerprint {
  id          String   @id @default(cuid())
  workspaceId String
  entity      String
  key         String
  entityId    String
  createdAt   DateTime @default(now())

  @@unique([workspaceId, entity, key])
  @@index([workspaceId, entity])
}

model Admin {
  id        String                 @id @default(cuid())
  email     String                 @unique
  role      AdminRole              @default(SUPPORT)
  createdAt DateTime               @default(now())
  logs      AuditLog[]
  sessions  ImpersonationSession[]
}

model ImpersonationSession {
  id          String    @id @default(cuid())
  adminId     String
  workspaceId String
  tokenHash   String
  reason      String?
  active      Boolean   @default(true)
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  admin       Admin     @relation(fields: [adminId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId, active])
}

model RunStepExecution {
  id         String             @id @default(cuid())
  runId      String
  step       String
  status     String             @default("PENDING")
  inputJson  Json
  outputJson Json?
  errorJson  Json?
  startedAt  DateTime           @default(now())
  finishedAt DateTime?
  traceId    String?
  replayOfId String?
  original   RunStepExecution?  @relation("Replay", fields: [replayOfId], references: [id])
  replays    RunStepExecution[] @relation("Replay")
  run        BrandRun           @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@index([runId, step])
  @@index([traceId])
}

model ErrorEvent {
  id          String     @id @default(cuid())
  workspaceId String?
  where       String
  message     String
  stack       String?
  meta        Json?
  traceId     String?
  createdAt   DateTime   @default(now())
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model ActivityLog {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String
  action      String
  targetId    String?
  targetType  String?
  meta        Json?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
  @@index([userId, createdAt])
  @@index([action, createdAt])
}

model EvalResult {
  id               String   @id @default(cuid())
  date             DateTime @default(now())
  auditScore       Float
  matchScore       Float
  outreachScore    Float
  avgTokens        Int
  totalTests       Int
  passedTests      Int
  overallScore     Float
  userApprovalRate Float    @default(0)

  @@index([date])
  @@index([overallScore])
}

model AiFeedback {
  id          String       @id @default(cuid())
  workspaceId String
  userId      String
  type        FeedbackType
  targetId    String
  decision    Decision
  comment     String?
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, type, targetId])
  @@index([workspaceId, type, createdAt])
  @@index([userId, createdAt])
}

model ContactNote {
  id          String    @id @default(cuid())
  workspaceId String
  contactId   String
  authorId    String?
  body        String
  pinned      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, contactId])
}

model ContactTask {
  id          String     @id @default(cuid())
  workspaceId String
  contactId   String
  title       String
  dueAt       DateTime?
  status      TaskStatus @default(OPEN)
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  contact     Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, contactId, status, dueAt])
}

model PushSubscription {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String?
  endpoint    String    @unique
  p256dh      String
  auth        String
  userAgent   String?
  platform    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastSeenAt  DateTime?
  disabled    Boolean   @default(false)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, userId])
}

model AdminActionLog {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String?
  action      String
  details     Json?
  traceId     String?
  createdAt   DateTime  @default(now())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model ContentSafetyCheck {
  id             String        @id @default(cuid())
  workspaceId    String
  sequenceStepId String?
  subject        String?
  bodyHash       String
  verdict        SafetyVerdict
  reasons        String[]
  model          String?
  tokens         Int?
  createdAt      DateTime      @default(now())
  workspace      Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt, verdict])
}

model ExportJob {
  id          String       @id @default(cuid())
  workspaceId String
  kind        String
  status      ExportStatus @default(QUEUED)
  requestedBy String?
  resultUrl   String?
  error       String?
  createdAt   DateTime     @default(now())
  completedAt DateTime?
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, status, createdAt])
}

model RetentionPolicy {
  id             String    @id @default(cuid())
  workspaceId    String    @unique
  auditsDays     Int?
  outreachDays   Int?
  logsDays       Int?
  contactsDays   Int?
  mediaPacksDays Int?
  enabled        Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SignalEvent {
  id             String    @id @default(cuid())
  workspaceId    String
  domainHash     String?
  industry       String?
  sizeBand       String?
  region         String?
  season         String?
  channel        String?
  sendDow        Int?
  sendHour       Int?
  templateFamily String?
  tone           String?
  stepsPlanned   Int?
  replied        Boolean   @default(false)
  won            Boolean   @default(false)
  valueUsd       Float?
  sentAt         DateTime  @default(now())
  outcomeAt      DateTime?
  createdAt      DateTime  @default(now())
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([industry, sizeBand, region, season, tone, templateFamily, sendDow, sendHour])
  @@index([workspaceId, createdAt])
}

model SignalAggregate {
  id             String   @id @default(cuid())
  industry       String?
  sizeBand       String?
  region         String?
  season         String?
  tone           String?
  templateFamily String?
  sendDow        Int?
  sendHour       Int?
  sends          Int      @default(0)
  replies        Int      @default(0)
  wins           Int      @default(0)
  revenueUsd     Float    @default(0)
  dpEpsilon      Float?
  kmin           Int      @default(10)
  computedAt     DateTime @default(now())

  @@index([industry, sizeBand, region, season, tone, templateFamily, sendDow, sendHour])
}

model BrandReadinessSignal {
  id         String   @id @default(cuid())
  industry   String?
  sizeBand   String?
  region     String?
  score      Int
  components Json
  source     String
  computedAt DateTime @default(now())

  @@index([industry, sizeBand, region, computedAt])
}

model Playbook {
  id               String   @id @default(cuid())
  industry         String?
  sizeBand         String?
  region           String?
  season           String?
  payload          Json
  rationale        String?
  version          Int      @default(1)
  derivedFromAggAt DateTime
  createdAt        DateTime @default(now())

  @@index([industry, sizeBand, region, season, version])
}

model SocialAccount {
  id             String    @id @default(cuid())
  workspaceId    String
  platform       String
  externalId     String
  username       String?
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  meta           Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, platform])
  @@index([workspaceId])
  @@index([platform])
}

model MediaPackFile {
  id        String                @id @default(cuid())
  packId    String                @db.VarChar(128)
  variant   String                @db.VarChar(32)
  dark      Boolean               @default(false)
  mime      String                @db.VarChar(64)
  size      Int
  sha256    String                @db.VarChar(128)
  data      Bytes
  createdAt DateTime              @default(now())
  shares    MediaPackShareToken[]
}

model MediaPackShareToken {
  token     String        @id @default(cuid())
  fileId    String
  createdAt DateTime      @default(now())
  file      MediaPackFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

enum Plan {
  FREE
  PRO
  AGENCY
}

enum CreditKind {
  AI
  EMAIL
}

enum Role {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

enum DealStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  OPEN
  COUNTERED
  WON
  LOST
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ContactVerificationStatus {
  UNVERIFIED
  VALID
  RISKY
  INVALID
}

enum SequenceStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum StepStatus {
  PENDING
  SENT
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
}

enum ThreadStatus {
  OPEN
  WAITING
  WON
  LOST
  CLOSED
}

enum ImportKind {
  BRAND
  CONTACT
  DEAL
}

enum ImportSource {
  CSV
  GSHEETS
}

enum ImportStatus {
  RECEIVED
  MAPPING
  RUNNING
  COMPLETED
  FAILED
  CANCELED
}

enum AdminRole {
  SUPER
  SUPPORT
}

enum FeedbackType {
  MATCH
  OUTREACH
  AUDIT
}

enum Decision {
  UP
  DOWN
}

enum TaskStatus {
  OPEN
  DONE
  SNOOZED
}

enum SafetyVerdict {
  PASS
  WARN
  BLOCK
}

enum ExportStatus {
  QUEUED
  RUNNING
  DONE
  FAILED
}
