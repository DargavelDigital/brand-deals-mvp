generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ActivityLog {
  id          String    @id
  workspaceId String
  userId      String
  action      String
  targetId    String?
  targetType  String?
  meta        Json?
  createdAt   DateTime  @default(now())
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([action, createdAt])
  @@index([userId, createdAt])
  @@index([workspaceId, createdAt])
}

model Admin {
  id                   String                 @id
  email                String                 @unique
  role                 AdminRole              @default(SUPPORT)
  createdAt            DateTime               @default(now())
  AuditLog             AuditLog[]
  ImpersonationSession ImpersonationSession[]
}

model AdminActionLog {
  id          String    @id
  workspaceId String
  userId      String?
  action      String
  details     Json?
  traceId     String?
  createdAt   DateTime  @default(now())
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model AiFeedback {
  id          String       @id
  workspaceId String
  userId      String
  type        FeedbackType
  targetId    String
  decision    Decision
  comment     String?
  createdAt   DateTime     @default(now())
  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([workspaceId, type, createdAt])
  @@index([workspaceId, type, targetId])
}

model AiUsageEvent {
  id            String    @id
  workspaceId   String
  traceId       String
  packKey       String
  provider      String
  model         String
  inputTokens   Int       @default(0)
  outputTokens  Int       @default(0)
  inputCostUsd  Float     @default(0)
  outputCostUsd Float     @default(0)
  totalCostUsd  Float     @default(0)
  dryRun        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  Workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([traceId])
  @@index([workspaceId, createdAt])
}

model Audit {
  id           String    @id
  workspaceId  String
  sources      String[]  @default([])
  snapshotJson Json?
  createdAt    DateTime  @default(now())
  Workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model AuditLog {
  id          String    @id
  workspaceId String
  actorUserId String?
  action      String
  targetType  String?
  targetId    String?
  meta        Json?
  createdAt   DateTime  @default(now())
  adminId     String?
  ip          String?
  traceId     String?
  ua          String?
  Admin       Admin?    @relation(fields: [adminId], references: [id])
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model Brand {
  id               String             @id
  name             String
  description      String?
  logo             String?
  website          String?
  industry         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  workspaceId      String
  Workspace        Workspace          @relation(fields: [workspaceId], references: [id])
  BrandMatch       BrandMatch[]
  BrandProfile     BrandProfile?
  Contact          Contact[]
  Conversation     Conversation[]
  Deal             Deal[]
  OutreachSequence OutreachSequence[]

  @@unique([workspaceId, name])
}

model BrandCandidateCache {
  id           String    @id
  workspaceId  String
  term         String?
  payload      Json
  expiresAt    DateTime?
  discoveredAt DateTime  @default(now())
  domain       String?
  refreshedAt  DateTime

  @@index([expiresAt])
  @@index([workspaceId, discoveredAt])
  @@index([workspaceId, domain])
  @@index([workspaceId, term])
}

model BrandMatch {
  id          String    @id
  workspaceId String
  brandId     String
  score       Int
  reasons     String[]  @default([])
  createdAt   DateTime  @default(now())
  Brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, brandId])
  @@index([workspaceId, score])
}

model BrandProfile {
  id                  String   @id
  brandId             String   @unique
  logoUrl             String?
  primaryColor        String?
  secondaryColor      String?
  categories          String[]
  domain              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  brandPrimaryColor   String?
  brandSecondaryColor String?
  Brand               Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
}

model BrandReadinessSignal {
  id         String   @id
  industry   String?
  sizeBand   String?
  region     String?
  score      Int
  components Json
  source     String
  computedAt DateTime @default(now())

  @@index([industry, sizeBand, region, computedAt])
}

model BrandRun {
  id               String             @id
  workspaceId      String
  step             String
  auto             Boolean            @default(false)
  selectedBrandIds String[]           @default([])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  runSummaryJson   Json?
  stepStatuses     Json?
  Workspace        Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  RunStepExecution RunStepExecution[]

  @@index([workspaceId, step])
}

model Contact {
  id             String                    @id
  workspaceId    String
  brandId        String?
  name           String
  title          String?
  email          String
  phone          String?
  company        String?
  seniority      String?
  verifiedStatus ContactVerificationStatus @default(UNVERIFIED)
  score          Int                       @default(0)
  source         String?
  tags           String[]                  @default([])
  notes          String?
  lastContacted  DateTime?
  status         ContactStatus             @default(ACTIVE)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime
  nextStep       String?
  remindAt       DateTime?
  Brand          Brand?                    @relation(fields: [brandId], references: [id])
  Workspace      Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  ContactNote    ContactNote[]
  ContactTask    ContactTask[]
  Conversation   Conversation[]
  InboxThread    InboxThread[]
  SequenceStep   SequenceStep[]

  @@unique([workspaceId, email])
  @@index([workspaceId, brandId])
  @@index([workspaceId, status])
}

model ContactNote {
  id          String    @id
  workspaceId String
  contactId   String
  authorId    String?
  body        String
  pinned      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, contactId])
}

model ContactTask {
  id          String     @id
  workspaceId String
  contactId   String
  title       String
  dueAt       DateTime?
  status      TaskStatus @default(OPEN)
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  Contact     Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, contactId, status, dueAt])
}

model ContentSafetyCheck {
  id             String        @id
  workspaceId    String
  sequenceStepId String?
  subject        String?
  bodyHash       String
  verdict        SafetyVerdict
  reasons        String[]
  model          String?
  tokens         Int?
  createdAt      DateTime      @default(now())
  Workspace      Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt, verdict])
}

model Conversation {
  id               String            @id
  workspaceId      String
  sequenceId       String?
  brandId          String?
  contactId        String
  subject          String?
  threadKey        String            @unique
  lastAt           DateTime          @default(now())
  Brand            Brand?            @relation(fields: [brandId], references: [id])
  Contact          Contact           @relation(fields: [contactId], references: [id], onDelete: Cascade)
  OutreachSequence OutreachSequence? @relation(fields: [sequenceId], references: [id])
  Workspace        Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Message          Message[]

  @@index([contactId])
  @@index([sequenceId])
  @@index([workspaceId])
}

model CreditLedger {
  id           String     @id
  workspaceId  String
  createdAt    DateTime   @default(now())
  balanceAfter Int
  delta        Int
  kind         CreditKind
  reason       String?
  ref          String?
  Workspace    Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model Deal {
  id            String     @id
  title         String
  description   String?
  value         Float?
  status        DealStatus @default(OPEN)
  brandId       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime
  workspaceId   String
  category      String?
  counterAmount Int?
  creatorId     String?
  finalAmount   Int?
  offerAmount   Int
  Brand         Brand      @relation(fields: [brandId], references: [id])
  Workspace     Workspace  @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId, category])
  @@index([workspaceId, createdAt])
  @@index([workspaceId, status])
}

model DedupeFingerprint {
  id          String   @id
  workspaceId String
  entity      String
  key         String
  entityId    String
  createdAt   DateTime @default(now())

  @@unique([workspaceId, entity, key])
  @@index([workspaceId, entity])
}

model DigestPreference {
  id          String   @id
  workspaceId String   @unique
  cadence     String
  hourOfDay   Int      @default(9)
  timezone    String   @default("UTC")
  updatedAt   DateTime
}

model EmailTemplate {
  id          String    @id
  key         String
  name        String
  subject     String
  body        String
  variables   String[]
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, key])
}

model EncryptedSecret {
  id          String     @id
  workspaceId String?
  key         String
  enc         Bytes
  iv          Bytes
  tag         Bytes
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, key])
}

model ErrorEvent {
  id          String     @id
  workspaceId String?
  where       String
  message     String
  stack       String?
  meta        Json?
  traceId     String?
  createdAt   DateTime   @default(now())
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model EvalResult {
  id               String   @id
  date             DateTime @default(now())
  auditScore       Float
  matchScore       Float
  outreachScore    Float
  avgTokens        Int
  totalTests       Int
  passedTests      Int
  overallScore     Float
  userApprovalRate Float    @default(0)

  @@index([date])
  @@index([overallScore])
}

model ExportJob {
  id          String       @id
  workspaceId String
  kind        String
  status      ExportStatus @default(QUEUED)
  requestedBy String?
  resultUrl   String?
  error       String?
  createdAt   DateTime     @default(now())
  completedAt DateTime?
  Workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, status, createdAt])
}

model ImpersonationSession {
  id          String    @id
  adminId     String
  workspaceId String
  tokenHash   String
  reason      String?
  active      Boolean   @default(true)
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  Admin       Admin     @relation(fields: [adminId], references: [id])
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId, active])
}

model ImportJob {
  id          String       @id
  workspaceId String
  kind        ImportKind
  source      ImportSource
  status      ImportStatus @default(RECEIVED)
  fileUrl     String?
  sheetId     String?
  sheetRange  String?
  totalRows   Int?
  processed   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  summaryJson Json?
  Workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, kind, status])
}

model InboxMessage {
  id          String      @id
  threadId    String
  role        String
  fromEmail   String
  toEmail     String
  externalId  String?
  subject     String?
  text        String?
  html        String?
  createdAt   DateTime    @default(now())
  InboxThread InboxThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt])
}

model InboxThread {
  id            String         @id
  workspaceId   String
  sequenceId    String?
  contactId     String
  brandId       String?
  subject       String
  status        ThreadStatus   @default(OPEN)
  lastMessageAt DateTime       @default(now())
  createdAt     DateTime       @default(now())
  InboxMessage  InboxMessage[]
  Contact       Contact        @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([contactId])
  @@index([sequenceId])
  @@index([workspaceId, lastMessageAt])
}

model MediaPack {
  id            String          @id
  packId        String          @unique
  workspaceId   String
  variant       String
  payload       Json?
  theme         Json?
  contentHash   String?
  shareToken    String?         @unique
  createdAt     DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?       @default(now()) @db.Timestamptz(6)
  Workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  MediaPackFile MediaPackFile[]
}

model MediaPackClick {
  id          String   @id
  mediaPackId String
  variant     String
  workspaceId String
  ctaId       String
  href        String
  sequenceId  String?
  brandId     String?
  stepId      String?
  contactId   String?
  visitorId   String
  sessionId   String
  createdAt   DateTime @default(now())

  @@index([mediaPackId, createdAt])
  @@index([variant])
  @@index([workspaceId, createdAt])
}

model MediaPackConversion {
  id          String   @id
  mediaPackId String
  brandId     String?
  type        String
  createdAt   DateTime @default(now())
  contactId   String?
  sequenceId  String?
  sessionId   String
  stepId      String?
  value       Float?
  variant     String
  visitorId   String
  workspaceId String

  @@index([mediaPackId, createdAt])
  @@index([type])
  @@index([workspaceId, createdAt])
}

model MediaPackDaily {
  id          String   @id
  mediaPackId String
  date        DateTime
  variant     String
  views       Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  ctr         Float    @default(0)
  cvr         Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@unique([mediaPackId, date, variant])
  @@index([mediaPackId, date])
}

model MediaPackFile {
  id        String    @id
  packId    String
  variant   String
  mime      String
  size      Int
  sha256    String
  data      Bytes
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  MediaPack MediaPack @relation(fields: [packId], references: [id], onDelete: Cascade, map: "MediaPackFile_packIdRef_fkey")

  @@index([packId], map: "MediaPackFile_packIdRef_idx")
  @@index([variant, createdAt])
}

model MediaPackShareToken {
  token     String   @id
  fileId    String
  createdAt DateTime @default(now())
}

model MediaPackTracking {
  id          String   @id
  mediaPackId String
  event       String
  cta         String?
  durationMs  Int?
  referer     String?
  userAgent   String?
  ipHash      String?
  createdAt   DateTime @default(now())

  @@index([createdAt])
  @@index([mediaPackId, event])
}

model MediaPackView {
  id          String   @id
  mediaPackId String
  createdAt   DateTime @default(now())
  variant     String
  brandId     String?
  contactId   String?
  dwellMs     Int?
  ipHash      String?
  referrer    String?
  scrollDepth Int?
  sequenceId  String?
  sessionId   String
  stepId      String?
  ua          String?
  utmCampaign String?
  utmMedium   String?
  utmSource   String?
  visitorId   String
  workspaceId String

  @@index([mediaPackId, createdAt])
  @@index([variant])
  @@index([workspaceId, createdAt])
}

model Membership {
  id                                String    @id
  userId                            String
  workspaceId                       String
  role                              Role
  createdAt                         DateTime  @default(now())
  updatedAt                         DateTime
  invitedById                       String?
  User_Membership_invitedByIdToUser User?     @relation("Membership_invitedByIdToUser", fields: [invitedById], references: [id])
  User_Membership_userIdToUser      User      @relation("Membership_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)
  Workspace                         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([invitedById])
  @@index([workspaceId, role])
}

model Message {
  id             String       @id
  conversationId String
  direction      String
  provider       String?
  providerMsgId  String?
  inReplyTo      String?
  fromAddr       String?
  toAddr         String?
  subject        String?
  text           String?
  html           String?
  status         String?
  createdAt      DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([providerMsgId])
}

model Notification {
  id          String    @id
  workspaceId String
  type        String
  title       String
  message     String?
  payload     Json?
  seen        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model OutreachSequence {
  id           String         @id
  workspaceId  String
  brandId      String
  mediaPackId  String?
  name         String
  status       SequenceStatus @default(DRAFT)
  totalSteps   Int
  currentStep  Int            @default(1)
  settings     Json
  tone         String?
  fromEmail    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Conversation Conversation[]
  Brand        Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  Workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  SequenceStep SequenceStep[]

  @@index([workspaceId, status])
}

model Playbook {
  id               String   @id
  industry         String?
  sizeBand         String?
  region           String?
  season           String?
  payload          Json
  rationale        String?
  version          Int      @default(1)
  derivedFromAggAt DateTime
  createdAt        DateTime @default(now())

  @@index([industry, sizeBand, region, season, version])
}

model PushSubscription {
  id          String    @id
  workspaceId String
  userId      String?
  endpoint    String    @unique
  p256dh      String
  auth        String
  userAgent   String?
  platform    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  lastSeenAt  DateTime?
  disabled    Boolean   @default(false)
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, userId])
}

model RetentionPolicy {
  id             String    @id
  workspaceId    String    @unique
  auditsDays     Int?
  outreachDays   Int?
  logsDays       Int?
  contactsDays   Int?
  mediaPacksDays Int?
  enabled        Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  Workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model RunStepExecution {
  id                     String             @id
  runId                  String
  step                   String
  status                 String             @default("PENDING")
  inputJson              Json
  outputJson             Json?
  errorJson              Json?
  startedAt              DateTime           @default(now())
  finishedAt             DateTime?
  traceId                String?
  replayOfId             String?
  RunStepExecution       RunStepExecution?  @relation("RunStepExecutionToRunStepExecution", fields: [replayOfId], references: [id])
  other_RunStepExecution RunStepExecution[] @relation("RunStepExecutionToRunStepExecution")
  BrandRun               BrandRun           @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@index([runId, step])
  @@index([traceId])
}

model SequenceStep {
  id               String           @id
  sequenceId       String
  contactId        String
  stepNumber       Int
  scheduledAt      DateTime
  status           StepStatus       @default(PENDING)
  sentAt           DateTime?
  openedAt         DateTime?
  clickedAt        DateTime?
  repliedAt        DateTime?
  bouncedAt        DateTime?
  provider         String?
  providerMsgId    String?
  threadKey        String?
  subject          String?
  html             String?
  text             String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  Contact          Contact          @relation(fields: [contactId], references: [id])
  OutreachSequence OutreachSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)

  @@index([contactId])
  @@index([providerMsgId])
  @@index([scheduledAt])
  @@index([sequenceId, stepNumber])
  @@index([status])
  @@index([threadKey])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SignalAggregate {
  id             String   @id
  industry       String?
  sizeBand       String?
  region         String?
  season         String?
  tone           String?
  templateFamily String?
  sendDow        Int?
  sendHour       Int?
  sends          Int      @default(0)
  replies        Int      @default(0)
  wins           Int      @default(0)
  revenueUsd     Float    @default(0)
  dpEpsilon      Float?
  kmin           Int      @default(10)
  computedAt     DateTime @default(now())

  @@index([industry, sizeBand, region, season, tone, templateFamily, sendDow, sendHour])
}

model SignalEvent {
  id             String    @id
  workspaceId    String
  domainHash     String?
  industry       String?
  sizeBand       String?
  region         String?
  season         String?
  channel        String?
  sendDow        Int?
  sendHour       Int?
  templateFamily String?
  tone           String?
  stepsPlanned   Int?
  replied        Boolean   @default(false)
  won            Boolean   @default(false)
  valueUsd       Float?
  sentAt         DateTime  @default(now())
  outcomeAt      DateTime?
  createdAt      DateTime  @default(now())
  Workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([industry, sizeBand, region, season, tone, templateFamily, sendDow, sendHour])
  @@index([workspaceId, createdAt])
}

model SocialAccount {
  id             String    @id
  workspaceId    String
  platform       String
  externalId     String
  username       String?
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  meta           Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  Workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, platform])
  @@index([platform])
  @@index([workspaceId])
}

model SocialSnapshotCache {
  id          String   @id
  workspaceId String
  platform    String
  externalId  String
  payload     Json
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  @@index([expiresAt])
  @@index([workspaceId, platform, externalId])
}

model Subscription {
  id          String    @id
  workspaceId String    @unique
  plan        String    @default("STARTER")
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model User {
  id                                      String        @id
  name                                    String?
  email                                   String?       @unique
  emailVerified                           DateTime?
  image                                   String?
  createdAt                               DateTime      @default(now())
  updatedAt                               DateTime
  Account                                 Account[]
  ActivityLog                             ActivityLog[]
  AiFeedback                              AiFeedback[]
  Membership_Membership_invitedByIdToUser Membership[]  @relation("Membership_invitedByIdToUser")
  Membership_Membership_userIdToUser      Membership[]  @relation("Membership_userIdToUser")
  Session                                 Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id                   String                 @id
  name                 String
  slug                 String                 @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  featureFlags         Json?                  @default("{}")
  deletedAt            DateTime?
  aiTokensBalance      Int                    @default(0)
  emailBalance         Int                    @default(0)
  emailDailyUsed       Int                    @default(0)
  periodEnd            DateTime?
  periodStart          DateTime?
  plan                 Plan                   @default(FREE)
  stripeCustomerId     String?                @unique
  stripeSubId          String?
  ActivityLog          ActivityLog[]
  AdminActionLog       AdminActionLog[]
  AiFeedback           AiFeedback[]
  AiUsageEvent         AiUsageEvent[]
  Audit                Audit[]
  AuditLog             AuditLog[]
  Brand                Brand[]
  BrandMatch           BrandMatch[]
  BrandRun             BrandRun[]
  Contact              Contact[]
  ContactNote          ContactNote[]
  ContactTask          ContactTask[]
  ContentSafetyCheck   ContentSafetyCheck[]
  Conversation         Conversation[]
  CreditLedger         CreditLedger[]
  Deal                 Deal[]
  EmailTemplate        EmailTemplate[]
  EncryptedSecret      EncryptedSecret[]
  ErrorEvent           ErrorEvent[]
  ExportJob            ExportJob[]
  ImpersonationSession ImpersonationSession[]
  ImportJob            ImportJob[]
  InboxThread          InboxThread[]
  MediaPack            MediaPack[]
  Membership           Membership[]
  Notification         Notification[]
  OutreachSequence     OutreachSequence[]
  PushSubscription     PushSubscription[]
  RetentionPolicy      RetentionPolicy?
  SignalEvent          SignalEvent[]
  SocialAccount        SocialAccount[]
  Subscription         Subscription?

  @@index([deletedAt])
}

enum AdminRole {
  SUPER
  SUPPORT
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ContactVerificationStatus {
  UNVERIFIED
  VALID
  RISKY
  INVALID
}

enum CreditKind {
  AI
  EMAIL
}

enum DealStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  OPEN
  COUNTERED
  WON
  LOST
}

enum Decision {
  UP
  DOWN
}

enum ExportStatus {
  QUEUED
  RUNNING
  DONE
  FAILED
}

enum FeedbackType {
  MATCH
  OUTREACH
  AUDIT
}

enum ImportKind {
  BRAND
  CONTACT
  DEAL
}

enum ImportSource {
  CSV
  GSHEETS
}

enum ImportStatus {
  RECEIVED
  MAPPING
  RUNNING
  COMPLETED
  FAILED
  CANCELED
}

enum Plan {
  FREE
  PRO
  AGENCY
}

enum Role {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

enum SafetyVerdict {
  PASS
  WARN
  BLOCK
}

enum SequenceStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum StepStatus {
  PENDING
  SENT
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
}

enum TaskStatus {
  OPEN
  DONE
  SNOOZED
}

enum ThreadStatus {
  OPEN
  WAITING
  WON
  LOST
  CLOSED
}
