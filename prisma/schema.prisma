generator client {
  provider = "prisma-client-js"
}

// This schema is used for both build-time generation and runtime
// During build (Netlify), DATABASE_URL may not be available
// During runtime, DATABASE_URL must be set for database operations
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  workspaceId   String?
  accounts      Account[]
  sessions      Session[]
  workspace     Workspace? @relation(fields: [workspaceId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id             String          @id @default(cuid())
  name           String
  slug           String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  audits         Audit[]
  brands         Brand[]
  brandMatches   BrandMatch[]
  brandRuns      BrandRun[]
  contacts       Contact[]
  creditLedger   CreditLedger[]
  deals          Deal[]
  emailTemplates EmailTemplate[]
  mediaPacks     MediaPack[]
  subscriptions  Subscription?
  users          User[]
}

model Audit {
  id           String    @id @default(cuid())
  workspaceId  String
  sources      String[]  @default([])
  snapshotJson Json
  createdAt    DateTime  @default(now())
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
}

model Brand {
  id           String        @id @default(cuid())
  name         String
  description  String?
  logo         String?
  website      String?
  industry     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  brandMatches BrandMatch[]
  profile      BrandProfile?
  contacts     Contact[]
  deals        Deal[]

  @@unique([workspaceId, name])
}

model BrandProfile {
  id                  String   @id @default(cuid())
  brandId             String   @unique
  logoUrl             String?
  primaryColor        String?
  secondaryColor      String?
  categories          String[]
  domain              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  brandPrimaryColor   String?
  brandSecondaryColor String?
  brand               Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
}

model Deal {
  id          String     @id @default(cuid())
  title       String
  description String?
  value       Float?
  status      DealStatus @default(PENDING)
  brandId     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workspaceId String
  brand       Brand      @relation(fields: [brandId], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
}

model Subscription {
  id          String    @id @default(cuid())
  workspaceId String    @unique
  plan        String    @default("STARTER")
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}

model CreditLedger {
  id          String     @id @default(cuid())
  workspaceId String
  type        CreditType
  amount      Int
  description String?
  createdAt   DateTime   @default(now())
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
}

model EmailTemplate {
  id          String    @id @default(cuid())
  key         String
  name        String
  subject     String
  body        String
  variables   String[]
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, key])
}

model MediaPack {
  id          String    @id @default(cuid())
  variant     String    @default("default")
  htmlUrl     String?
  pdfUrl      String?
  workspaceId String
  creatorId   String?
  demo        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, variant])
}

model BrandRun {
  id               String    @id @default(cuid())
  workspaceId      String
  step             String
  auto             Boolean   @default(false)
  selectedBrandIds String[]  @default([])
  mediaPackId      String?
  sequenceId       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, step])
}

model BrandMatch {
  id          String    @id @default(cuid())
  workspaceId String
  brandId     String
  score       Int
  reasons     String[]  @default([])
  createdAt   DateTime  @default(now())
  brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, brandId])
  @@index([workspaceId, score])
}

model Contact {
  id             String                    @id @default(cuid())
  workspaceId    String
  brandId        String?
  name           String
  title          String?
  email          String
  phone          String?
  company        String?
  seniority      String?
  verifiedStatus ContactVerificationStatus @default(UNVERIFIED)
  score          Int                       @default(0)
  source         String?
  tags           String[]                  @default([])
  notes          String?
  lastContacted  DateTime?
  status         ContactStatus             @default(ACTIVE)
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  brand          Brand?                    @relation(fields: [brandId], references: [id])
  workspace      Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, email])
  @@index([workspaceId, brandId])
  @@index([workspaceId, status])
}

enum DealStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum CreditType {
  AUDIT
  MEDIA_PACK
  OUTREACH
}

enum ContactVerificationStatus {
  UNVERIFIED
  VALID
  RISKY
  INVALID
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}
